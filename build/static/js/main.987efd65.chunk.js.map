{"version":3,"sources":["Assets/WorkSans/static/WorkSans-Bold.ttf","Assets/WorkSans/static/WorkSans-Regular.ttf","Components/LayoutComponents.ts","Components/Header/index.tsx","utils/currentInfo.ts","Components/CurrentDriversPanel/CurrentDriverCards.tsx","queries.ts","Components/CurrentDriversPanel/index.tsx","Components/CurrentTeamsPanel/CurrentTeamCards.tsx","Components/CurrentTeamsPanel/index.tsx","App.tsx","index.tsx"],"names":["Fonts","createGlobalStyle","workSansBold","workSansReg","Spacer","styled","div","Section","Title","Scroll","Cards","props","bg","HeaderStyled","LogoStyled","Header","Fragment","getDriverStyle","id","team","primary","secondary","CodeNumber","color","DriverName","First","Last","Team","CurrentDriverCards","driver","driverStyle","driverId","onClick","console","log","code","permanentNumber","givenName","familyName","toUpperCase","CURRENT_DRIVERS_HOME","gql","CURRENT_TEAMS_HOME","CurrentDriversPanel","useQuery","loading","data","allDrivers","map","driverToDisplay","find","d","TeamName","CurrentTeamCards","teamStyle","constructorId","name","CurrentTeamsPanel","teamToDisplay","allTeams","t","App","className","client","ApolloClient","cache","InMemoryCache","link","HttpLink","uri","credentials","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.987efd65.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/WorkSans-Bold.98df8dcb.ttf\";","export default __webpack_public_path__ + \"static/media/WorkSans-Regular.b13bc1b6.ttf\";","import styled, { createGlobalStyle } from \"styled-components\";\nimport workSansBold from '../Assets/WorkSans/static/WorkSans-Bold.ttf';\nimport workSansReg from '../Assets/WorkSans/static/WorkSans-Regular.ttf';\n\n// #24282E Raisin Black\n// #D1DADC Light Gray\n// #FFFFFF White \n// #388659 Sea Green\n// #EF233C Imperial Red\n// #6279B8 Glaucous\n\nexport const Fonts = createGlobalStyle`\n    @font-face {\n        font-family: \"Work Sans Bold\";\n        src: url(${workSansBold}) format('truetype');\n    }\n    @font-face {\n        font-family: \"Work Sans Reg\";\n        src: url(${workSansReg}) format('truetype');\n    }\n`;\n\n\nexport const Spacer = styled.div`\n    min-height: 3rem;\n`;\n\nexport const Section = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: left;\n    height: auto;\n    width: 100%;\n    // background-color: turquoise;\n`;\n\n\nexport const Title = styled.div`\n    // background-color: #EF435C;\n    text-align: left;\n    color: #000000;\n    font-family: \"Work Sans Bold\";\n    font-size: 1rem;\n    padding: 1rem;\n    padding-bottom: 0;\n`;\n\nexport const Scroll = styled.div`\n    // background-color: tomato;\n    display: flex;\n    flex-flow: row nowrap;\n    font-size: 1rem;\n    padding-left: 0.5rem;\n    overflow: auto;\n`;\n\nexport const Cards = styled.div<{ bg: string}>`\n    \n    background-color: ${props => props.bg};\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    height: auto;\n    margin: 0.5rem;\n    padding: 0.5rem;\n    border-radius: 0.5rem;\n`;\n\n\n\n\n// #24282E Raisin Black\n// #D1DADC Light Gray\n// #FFFFFF White \n// #388659 Sea Green\n// #EF233C Imperial Red\n// #6279B8 Glaucous\n","import React from 'react';\nimport { Fonts } from '../LayoutComponents';\nimport styled from \"styled-components\";\n\nexport const HeaderStyled = styled.div`\n\n    display: flex;\n    flex-direction: row;\n    justify-content: left;\n    align-items: center;\n    height: 3rem;\n    width: 100%;\n    position: fixed;\n    box-shadow: 0px 0.5px 2px #D1DADC;\n    backdrop-filter: blur(3px);\n`;\n\n\nexport const LogoStyled = styled.div`\n    background-color: #EF435C;\n    color: #FFFFFF;\n    font-family: \"Work Sans Bold\";\n    font-size: 1rem;\n    padding: 0.5rem 1rem;\n    margin: 0.5rem;\n    border-radius: 4px;\n`;\n\n\nconst Header: React.FC = () => {\n\n\n  return (\n      <React.Fragment>\n        <HeaderStyled> \n          <Fonts />\n          <LogoStyled>REF1</LogoStyled> \n        </HeaderStyled>\n      </React.Fragment>\n  );\n};\n\nexport default Header;\n","interface CurrTeamStyles {\n    team        : string;\n    primary     : string;\n    secondary   : string;\n}\n\nexport const getDriverStyle = (id: string): CurrTeamStyles => {\n    switch(true) {\n        case id === 'hamilton' || id === 'bottas' || id === 'mercedes':\n            return {\n                team: 'Mercedes AMG Petronas F1 Team',\n                primary: '#02CCB6',\n                secondary: '#2E2E2E'\n\n            };\n        case id === 'max_verstappen' || id === 'albon' || id === 'red_bull':\n            return {\n                team: 'Red Bull Racing',\n                primary: '#0000AE',\n                secondary: '#F94774'\n            };\n        case id === 'leclerc' || id === 'vettel' || id === 'ferrari':\n            return {\n                team: 'Scuderia Ferrari',\n                primary: '#C00000',\n                secondary: '#2E2E2E'\n            };\n        case id === 'norris' || id === 'sainz' || id === 'mclaren':\n            return {\n                team: 'Mclaren Racing',\n                primary: '#FF8700',\n                secondary: '#2E2E2E'\n            };\n        case id === 'perez' || id === 'stroll' || id === 'racing_point':\n            return {\n                team: 'Racing Point F1 Team',\n                primary: '#FB61B2',\n                secondary: '#002E6C'\n            };\n        case id === 'gasly' || id === 'kvyat' || id === 'alphatauri':\n            return {\n                team: 'Scuderia AlphaTauri',\n                primary: '#1B2441',\n                secondary: '#D4D4D4'\n            };\n        case id === 'ocon' || id === 'ricciardo' || id === 'renault':\n            return {\n                team: 'Renault F1 Team',\n                primary: '#2E2E2E',\n                secondary: '#FFF500'\n            };\n        case id === 'giovinazzi' || id === 'raikkonen' || id === 'alfa':\n            return {\n                team: 'Alfa Romeo Racing',\n                primary: '#960000',\n                secondary: '#FFFFFF'\n            };\n        case id === 'latifi' || id === 'russell' || id === 'williams':\n            return {\n                team: 'Williams Racing',\n                primary: '#0082FA',\n                secondary: '#2E2E2E'\n            };\n        case id === 'grosjean' || id === 'kevin_magnussen' || id === 'haas':\n            return {\n                team: 'Haas F1 Team',\n                primary: '#9A9A9A',\n                secondary: '#C70A27'\n            };\n        \n        default:\n            return {\n                team: '',\n                primary: 'lightgrey',\n                secondary: '#2E2E2E'\n            };\n    }\n};","\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Driver } from '../../types';\nimport { getDriverStyle } from '../../utils/currentInfo';\nimport { Cards, Fonts } from '../LayoutComponents';\n\n\nconst CodeNumber = styled.div<{ color: string;}>`\n    color: ${props => props.color};\n    font-family: \"Work Sans Bold\";\n    display: flex;\n    flex-direction: row nowrap;\n    padding: 0.5rem;\n    font-size: 1.75rem;\n    min-width: 7rem;\n`;\n\nconst DriverName = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: flex-start;\n    min-height: 4rem;\n    padding: 0.5rem;\n    \n`;\n\nconst First = styled.div<{ color: string }>`\n    color: ${props => props.color};\n    font-family: \"Work Sans reg\";\n    font-size: 0.75rem;\n`;\n\nconst Last = styled.div<{ color: string }>`\n    color: ${props => props.color};\n    font-family: \"Work Sans Bold\";\n    font-size: 1rem;\n`;\n\nconst Team = styled.div`\n    color: #FFFFFF;\n    font-family: \"Work Sans Bold\";\n    font-size: 0.75rem;\n    min-height: 2rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n`;\n\n\n\nconst CurrentDriverCards: React.FC<{ driver: Driver }> = ({driver}: {driver: Driver}) => {\n    const driverStyle = getDriverStyle(driver.driverId);\n\n    return (\n        <>\n            <Fonts />\n            <Cards onClick={() => console.log(driver.driverId)} bg={driverStyle.primary}>\n                <CodeNumber color={driverStyle.secondary}>\n                    {driver.code} {driver.permanentNumber}</CodeNumber>\n\n                <DriverName>\n                    <First color={driverStyle.secondary}>\n                        {driver.givenName}</First>\n\n                    <Last color={driverStyle.secondary}>\n                        {driver.familyName.toUpperCase()}</Last>\n\n                </DriverName>\n                <Team>\n                    {driverStyle.team}</Team>\n            </Cards>\n        </>\n    );\n};\n\nexport default CurrentDriverCards;","import { gql } from '@apollo/client';\n\nexport const CURRENT_DRIVERS_HOME = gql`\n    query {\n        allDrivers(\n            period: \"2020\"\n        ) {\n            givenName\n            familyName\n            code\n            permanentNumber\n            driverId\n            entries {\n                points\n            }\n        }\n  }\n`;\n\nexport const CURRENT_TEAMS_HOME = gql`\n    query {\n        allTeams(\n            period: \"2020\"\n        ) {\n            name\n            constructorId\n        }\n  }\n`;\n\n// {\n//     givenName\n//     familyName\n//     code\n//     permanentNumber\n//     seasonsIn\n//     championships\n//     entries {\n//         period\n//         entries\n//         firstEntry {\n//             date\n//             race\n//         }\n//         lastEntry {\n//             date\n//             race\n//         }\n//         points\n//         avgPoints\n//         bestResult\n//         worstResult\n//         avgPosition\n//         championshipRank\n//         vsTeammates {\n//             driverAhead\n//             teammatesAhead\n//             pctAhead\n//         }\n//         stats {\n//             stat\n//             total\n//             pct\n//             first {\n//                 date\n//                 race\n//             }\n//             last {\n//                 date\n//                 race\n//             }\n//         }\n//     }\n//     }","import React from 'react';\nimport { Section, Title, Spacer, Scroll } from '../LayoutComponents';\nimport CurrentDriverCards from './CurrentDriverCards';\nimport { useQuery } from '@apollo/client';\nimport { Driver } from '../../types';\nimport { CURRENT_DRIVERS_HOME } from '../../queries';\n\n\n\nconst CurrentDriversPanel: React.FC = () => {\n    const { loading, data } = useQuery<{ allDrivers: Driver[] }>(CURRENT_DRIVERS_HOME);\n\n    \n    const displayOrder = [\n        'hamilton', 'bottas', 'max_verstappen', 'albon', \n        'leclerc', 'vettel', 'perez', 'stroll', \n        'ricciardo', 'ocon', 'sainz', 'norris', \n        'gasly', 'kvyat', 'raikkonen', 'giovinazzi', \n        'russell', 'latifi', \n        'hulkenberg', 'aitken', 'pietro_fittipaldi'];\n        \n\n    return (\n        <React.Fragment>\n            <Spacer />\n            <Section>  \n                <Title>2020 Drivers</Title>\n                    { loading ? <p>Loading ... </p> : null}\n                <Scroll>\n                    { data ? console.log(data.allDrivers) : null}\n                    { data ?  (\n                        displayOrder.map(driver => {\n                            const driverToDisplay = data.allDrivers.find(d => d.driverId === driver);\n\n                            if(!driverToDisplay) return null;\n\n                            return (\n                                <CurrentDriverCards \n                                    driver={driverToDisplay} \n                                    key={driverToDisplay.driverId} />\n                            );\n                        })\n                        ) : null\n                    }\n                </Scroll>\n            </Section>\n        </React.Fragment>\n    );\n};\n\nexport default CurrentDriversPanel;","\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Team } from '../../types';\nimport { getDriverStyle } from '../../utils/currentInfo';\nimport { Cards, Fonts } from '../LayoutComponents';\n\n\nconst TeamName = styled.div<{ color: string;}>`\n    color: ${props => props.color};\n    font-family: \"Work Sans Bold\";\n    display: flex;\n    flex-direction: row nowrap;\n    padding: 0.5rem;\n    font-size: 1rem;\n    width: auto;\n    height: auto;\n    white-space: nowrap;\n`;\n\n\n\nconst CurrentTeamCards: React.FC<{ team: Team }> = ({team}: {team: Team}) => {\n    const teamStyle = getDriverStyle(team.constructorId);\n\n    return (\n        <>\n            <Fonts />\n            <Cards onClick={() => console.log(team)} bg={teamStyle.primary}>\n                <TeamName color={teamStyle.secondary}>\n                    {team.name} </TeamName>\n            </Cards>\n        </>\n    );\n};\n\nexport default CurrentTeamCards;","import React from 'react';\nimport { Section, Title, Scroll } from '../LayoutComponents';\nimport CurrentTeamCards from './CurrentTeamCards';\nimport { useQuery } from '@apollo/client';\nimport { Team } from '../../types';\nimport { CURRENT_TEAMS_HOME } from '../../queries';\n\n\n\nconst CurrentTeamsPanel: React.FC = () => {\n    const { loading, data } = useQuery<{ allTeams: Team[] }>(CURRENT_TEAMS_HOME);\n\n    \n    const topRowOrder = [\n        'mercedes', 'ferrari','racing_point', \n        'mclaren', 'alfa' ,];\n    const bottomRowOrder = [\n        'red_bull', 'renault', \n        'alphatauri', 'haas', 'williams',];\n        \n\n    return (\n        <React.Fragment>\n            <Section>  \n                <Title>2020 Teams</Title>\n                    { loading ? <p>Loading ... </p> : null}\n                <Scroll>\n                    { data ?  (\n                        topRowOrder.map(team => {\n                            const teamToDisplay = data.allTeams.find(t => t.constructorId === team);\n\n                            if(!teamToDisplay) return null;\n\n                            return (\n                                <CurrentTeamCards \n                                    team={teamToDisplay} \n                                    key={teamToDisplay.constructorId} />\n                            );\n                        })\n                        ) : null\n                    }\n                </Scroll>\n                <Scroll>\n                    { data ?  (\n                        bottomRowOrder.map(team => {\n                            const teamToDisplay = data.allTeams.find(t => t.constructorId === team);\n\n                            if(!teamToDisplay) return null;\n\n                            return (\n                                <CurrentTeamCards \n                                    team={teamToDisplay} \n                                    key={teamToDisplay.constructorId} />\n                            );\n                        })\n                        ) : null\n                    }\n                </Scroll>\n            </Section>\n        </React.Fragment>\n    );\n};\n\nexport default CurrentTeamsPanel;","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport CurrentDriversPanel from './Components/CurrentDriversPanel';\nimport CurrentTeamsPanel from './Components/CurrentTeamsPanel';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <CurrentDriversPanel />\n      <CurrentTeamsPanel />\n      \n\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { ApolloClient, ApolloProvider, HttpLink, InMemoryCache } from '@apollo/client';\n\n\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({ \n    uri: 'https://ref1-app-backend.herokuapp.com',\n    credentials: 'include',\n  })\n});\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}